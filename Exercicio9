class Main {
    public static void main(String[] args) {
        int[] arr = {-10, -20, 2, 3, 1, 10};
        BubbleSort bubbleSort = new BubbleSort();
        QuickSort quickSort = new QuickSort();
        SortMachine sortMachine = new SortMachine(arr, quickSort);
        sortMachine.runSort();

        for(int element : sortMachine.getArr()) {
            System.out.println(element);
        }
    }
}

--------------------------------------------------------------------------------

public class BubbleSort implements SortingAlgorithm {

    @Override
    public void runSort(int[] arr) {
        int n = arr.length;
        int temp = arr[0];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < (n - i); j++) {
                if (arr[j - 1] > arr[j]) {
                    temp = arr[j - 1];
                    arr[j - 1] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        
    }

}

-----------------------------------------------------------------------------------

class QuickSort implements SortingAlgorithm {
	int partition(int arr[], int low, int high) {
		int pivot = arr[high];
		int i = (low - 1);
		for (int j = low; j < high; j++) {
			if (arr[j] <= pivot) {
				i++;

				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}

		int temp = arr[i + 1];
		arr[i + 1] = arr[high];
		arr[high] = temp;

		return i + 1;
	}

	void sort(int arr[], int low, int high) {
		if (low < high) {
			/*
			 * pi is partitioning index, arr[pi] is
			 * now at right place
			 */
			int pi = partition(arr, low, high);

			// Recursively sort elements before
			// partition and after partition
			sort(arr, low, pi - 1);
			sort(arr, pi + 1, high);
		}
	}

	@Override
	public void runSort(int[] arr) {
		sort(arr, 0, arr.length - 1);
	}
}

-------------------------------------------------------------------------------

public class SortMachine {
    private SortingAlgorithm sortingAlgoritm;
    private int[] arr;

    public SortMachine(int[] arr, SortingAlgorithm selectedSortingAlgoritm) {
        this.arr = arr;
        this.sortingAlgoritm = selectedSortingAlgoritm;
    }

    public int[] getArr() {
        return arr;
    }

    void runSort() {
        this.sortingAlgoritm.runSort(arr);
    }
}

---------------------------------------------------------------------------------------
public interface SortingAlgorithm {
    void runSort(int[] arr);
}
